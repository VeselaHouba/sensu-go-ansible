
entity -- Manages Sensu entities
================================

.. contents::
   :local:
   :depth: 1

Synopsis
--------
- For more information, refer to the Sensu documentation at https://docs.sensu.io/sensu-go/latest/reference/entities/



Parameters
----------

- annotations ({'description': ['Custom metadata fields with fewer restrictions, as key/value pairs.', 'These are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.'], 'type': 'dict'})
- auth ({'description': 'Authentication parameters. Can define each of them with ENV as well', 'type': 'dict', 'suboptions': {'user': {'description': ['The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.'], 'type': 'str', 'default': 'admin'}, 'password': {'description': ["The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked."], 'type': 'str', 'default': 'P@ssw0rd!'}, 'url': {'description': ['Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.'], 'type': 'str', 'default': 'http://localhost:8080'}, 'namespace': {'description': ['RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be checked.'], 'type': 'str', 'default': 'default'}}})
- deregister ({'description': ['If the entity should be removed when it stops sending keepalive messages.'], 'type': 'bool'})
- deregistration_handler ({'description': ['The name of the handler to be called when an entity is deregistered.'], 'type': 'str'})
- entity_class ({'description': ["Entity class. Standard classes are 'proxy' and 'agent', but you can use whatever you want."], 'type': 'str'})
- labels ({'description': ['Custom metadata fields that can be accessed within Sensu, as key/value pairs.'], 'type': 'dict'})
- last_seen ({'description': ['Timestamp the entity was last seen, in seconds since the Unix epoch.'], 'type': 'int'})
- name ({'description': ["The Sensu object's name."], 'type': 'str', 'required': True})
- redact ({'description': ['List of items to redact from log messages. If a value is provided, it overwrites the default list of items to be redacted.'], 'type': 'list'})
- state ({'description': ['Target state of the Sensu object.'], 'type': 'str', 'choices': ['present', 'absent'], 'default': 'present'})
- subscriptions ({'description': ['List of subscriptions for the entity.'], 'type': 'list'})
- system ({'description': ['System information about the entity, such as operating system and platform. See U(https://docs.sensu.io/sensu-go/5.13/reference/entities/#system-attributes) for more information.'], 'type': 'dict'})
- user ({'description': ['Sensu RBAC username used by the entity. Agent entities require get, list, create, update, and delete permissions for events across all namespaces.'], 'type': 'str'})




Examples
--------

.. code-block:: yaml+jinja

    
    - name: Create entity
      entity:
        auth:
          url: http://localhost:8080
        name: entity
        entity_class: proxy
        subscriptions:
          - web
          - prod
        system:
          hostname: playbook-entity
          os: linux
          platform: ubutntu
          network:
            interfaces:
              - name: lo
                addresses:
                  - 127.0.0.1/8
                  - ::1/128
              - name: eth0
                mac: 52:54:00:20:1b:3c
                addresses:
                  - 93.184.216.34/24
        last_seen: 1522798317
        deregister: yes
        deregistration_handler: email-handler
        redact:
          - password
          - pass
          - api_key
        user: agent




Return Values
-------------

::
    
    object:
        description: object representing Sensu entity
        returned: success
        type: dict


Status
------





Authors
~~~~~~~

- Paul Arthur (@flowerysong)
- Aljaz Kosir (@aljazkosir)
- Miha Plesko (@miha-plesko)
- Tadej Borovsak (@tadeboro)

