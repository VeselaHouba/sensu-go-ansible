
hook -- Manages Sensu hooks
===========================

.. contents::
   :local:
   :depth: 1

Synopsis
--------
- For more information, refer to the Sensu documentation at https://docs.sensu.io/sensu-go/latest/reference/hooks/



Parameters
----------

- annotations ({'description': ['Custom metadata fields with fewer restrictions, as key/value pairs.', 'These are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools.'], 'type': 'dict'})
- auth ({'description': 'Authentication parameters. Can define each of them with ENV as well', 'type': 'dict', 'suboptions': {'user': {'description': ['The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.'], 'type': 'str', 'default': 'admin'}, 'password': {'description': ["The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked."], 'type': 'str', 'default': 'P@ssw0rd!'}, 'url': {'description': ['Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked.'], 'type': 'str', 'default': 'http://localhost:8080'}, 'namespace': {'description': ['RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be checked.'], 'type': 'str', 'default': 'default'}}})
- command ({'description': ['Command to run when the hook is triggered.'], 'type': 'str'})
- labels ({'description': ['Custom metadata fields that can be accessed within Sensu, as key/value pairs.'], 'type': 'dict'})
- name ({'description': ["The Sensu object's name."], 'type': 'str', 'required': True})
- runtime_assets ({'description': ['List of runtime assets required to run the check'], 'type': 'list'})
- state ({'description': ['Target state of the Sensu object.'], 'type': 'str', 'choices': ['present', 'absent'], 'default': 'present'})
- stdin ({'description': ["Controls whether Sensu writes serialized JSON data to the process's stdin."], 'type': 'bool'})
- timeout ({'description': ['The hook execution duration timeout in seconds (hard stop).'], 'type': 'int'})




Examples
--------

.. code-block:: yaml+jinja

    
    - name: Rudimentary auto-remediation hook
      hook:
        auth:
          url: http://localhost:8080
        name: restart_nginx
        command: sudo systemctl start nginx
        timeout: 60
        stdin: false

    - name: Capture the process tree

      hook:
        auth:
          url: http://localhost:8080
        name: process_tree
        command: ps aux
        timeout: 60
        stdin: false




Return Values
-------------

::
    
    object:
        description: object representing Sensu hook
        returned: success
        type: dict


Status
------





Authors
~~~~~~~

- Paul Arthur (@flowerysong)
- Aljaz Kosir (@aljazkosir)
- Miha Plesko (@miha-plesko)
- Tadej Borovsak (@tadeboro)

